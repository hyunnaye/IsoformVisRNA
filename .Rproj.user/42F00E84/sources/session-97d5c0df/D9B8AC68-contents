#
# # https://www.nature.com/articles/s41514-020-00052-5
#
# calculateRatios <- function(counts_dir, cm_path, metadata_path, transcript_id1, transcript_id2, metadata_group) {
#   samplenames <- file_path_sans_ext(list.files(counts_dir, pattern="*.tsv", full.names=FALSE))
#   normCM <- read_tsv(paste(cm_path, sep=""))
#   metadata <- read_tsv(paste(metadata_path, sep=""))
#
#   desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
#   ratioDF <- data.frame(samplenames)
#   ratioList <- c()
#   for (i in 1:length(samplenames)){
#     ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
#     ratioList <- c(ratioList, ratio)
#   }
#   ratioDF$Ratio <- ratioList
#   ratioDF[, metadata_group] <- metadata[, metadata_group]
#   return(ratioDF)
# }
#
# ratioDF <- calculateRatios("IsoformVisRNA/transcript_quants", "IsoformVisRNA/combinedCM.tsv", "IsoformVisRNA/cleaned_metadata.tsv", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#
# generateBarPlot <- function(data, x_label, y_label) {
#   barPlot<-ggplot(data=ratioDF, aes_string(x=paste("fct_reorder(reorder(",colnames(data)[1], ",", colnames(data)[2], "),", colnames(data)[3],")"), y = colnames(data)[2], fill=colnames(data)[3])) +
#     geom_bar(stat = "identity", width=0.5)+
#     theme(text = element_text(size=10), axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.5, size=5))+
#     xlab(x_label) +
#     ylab(y_label)
#
#   print(barPlot)
# }
#
# generateBarPlot(ratioDF, "Sample names", "Ratio")
#
# generateBoxPlot <- function(data, x_label, y_label, title, order = NULL) {
#   boxPlot <- ggboxplot(ratioDF, x = colnames(data)[3], y = colnames(data)[2],
#                        fill = colnames(data)[3], order = order)+
#     grids()+
#     xlab(x_label) +
#     labs(title = title) +
#     scale_x_discrete(labels = function(x)
#       stringr::str_wrap(x, width = 15)) +
#     theme(axis.text.x=element_text(size=6), text=element_text(size=8), plot.title = element_text(size=16, hjust=0.5), legend.text = element_text(size=8))+
#     ylab(y_label)
#
#   print(boxPlot)
# }
#
# generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
