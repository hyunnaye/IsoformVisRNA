outputpath <- paste(outputdir, "combinedCM.tsv", sep="/")
NormalizedCM <- countmatrix
usethis::use_data(NormalizedCM)
}
combineCounts(countdir = "../transcript_quants", outputdir ="IsoformVisRNA")
# # Combine count matrices
#
library(tools)
combineCounts <- function(countdir, outputdir) {
filenames <- file_path_sans_ext(list.files(countdir, pattern="*.tsv", full.names=FALSE))
sample1 <- read_tsv(paste(countdir,'/', filenames[1], ".tsv", sep=""))
sample1 <- sample1 %>%
mutate(target_id = map(strsplit(.$target_id, split = '\\|'), 1) %>% unlist())
countmatrix <- data.frame(sample1$target_id)
colnames(countmatrix) <- "TranscriptIDs"
countmatrix[,filenames[1]] <- as.numeric(sample1$tpm) #tpm is the normalized count (transcript per million)
for (file in filenames[2:length(filenames)]){
sampledata <- read_tsv(paste(countdir,'/', file, ".tsv", sep=""))
countmatrix[,file] <- as.numeric(sampledata$tpm) # add tpm for transcript id for each sample.
}
outputpath <- paste(outputdir, "combinedCM.tsv", sep="/")
NormalizedCM <- countmatrix
usethis::use_data(NormalizedCM)
}
# # Combine count matrices
#
library(tools)
combineCounts <- function(countdir, outputdir) {
filenames <- file_path_sans_ext(list.files(countdir, pattern="*.tsv", full.names=FALSE))
sample1 <- read_tsv(paste(countdir,'/', filenames[1], ".tsv", sep=""))
sample1 <- sample1 %>%
mutate(target_id = map(strsplit(.$target_id, split = '\\|'), 1) %>% unlist())
countmatrix <- data.frame(sample1$target_id)
colnames(countmatrix) <- "TranscriptIDs"
countmatrix[,filenames[1]] <- as.numeric(sample1$tpm) #tpm is the normalized count (transcript per million)
for (file in filenames[2:length(filenames)]){
sampledata <- read_tsv(paste(countdir,'/', file, ".tsv", sep=""))
countmatrix[,file] <- as.numeric(sampledata$tpm) # add tpm for transcript id for each sample.
}
outputpath <- paste(outputdir, "combinedCM.tsv", sep="/")
NormalizedCM <- countmatrix
usethis::use_data(Normalized_CM)
}
combineCounts(countdir = "../transcript_quants", outputdir ="IsoformVisRNA")
# # Combine count matrices
#
library(tools)
combineCounts <- function(countdir, outputdir) {
filenames <- file_path_sans_ext(list.files(countdir, pattern="*.tsv", full.names=FALSE))
sample1 <- read_tsv(paste(countdir,'/', filenames[1], ".tsv", sep=""))
sample1 <- sample1 %>%
mutate(target_id = map(strsplit(.$target_id, split = '\\|'), 1) %>% unlist())
countmatrix <- data.frame(sample1$target_id)
colnames(countmatrix) <- "TranscriptIDs"
countmatrix[,filenames[1]] <- as.numeric(sample1$tpm) #tpm is the normalized count (transcript per million)
for (file in filenames[2:length(filenames)]){
sampledata <- read_tsv(paste(countdir,'/', file, ".tsv", sep=""))
countmatrix[,file] <- as.numeric(sampledata$tpm) # add tpm for transcript id for each sample.
}
outputpath <- paste(outputdir, "combinedCM.tsv", sep="/")
Normalized_CM <- countmatrix
usethis::use_data(Normalized_CM)
}
combineCounts(countdir = "../transcript_quants", outputdir ="IsoformVisRNA")
devtools::document()
?Normalized_CM
library(readr)
library(tools)
calculateRatios <- function(counts_dir, cm_path, metadata_path, transcript_id1, transcript_id2, metadata_group) {
samplenames <- file_path_sans_ext(list.files(counts_dir, pattern="*.tsv", full.names=FALSE))
normCM <- read_tsv(paste(cm_path, sep=""))
metadata <- read_tsv(paste(metadata_path, sep=""))
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
ratioDF <- calculateRatios("IsoformVisRNA/transcript_quants", "IsoformVisRNA/combinedCM.tsv", "IsoformVisRNA/cleaned_metadata.tsv", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
ratioDF <- calculateRatios("../../transcript_quants", "../../combinedCM.tsv", "../../cleaned_metadata.tsv", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
ratioDF <- calculateRatios("../../../transcript_quants", "../../../combinedCM.tsv", "../../../cleaned_metadata.tsv", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
ratioDF <- calculateRatios("/Users/nayeonhyun/Documents/BCB410/IsoformVisRNA/transcript_quants", "/Users/nayeonhyun/Documents/BCB410/IsoformVisRNA/combinedCM.tsv", "/Users/nayeonhyun/Documents/BCB410/IsoformVisRNA/cleaned_metadata.tsv", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
View(ratioDF)
#'
#' @param metadata_group the column name in metadata used to categorize samples into desired groups.
#'
#' @return Returns a matrix that includes the expression ratio of given transcript ids for each sample.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @export
#'
calculateRatios <- function(normCM, metadata, transcript_id1, transcript_id2, metadata_group) {
samplenames <- colnames(normCM)[, -1]
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @param metadata_group the column name in metadata used to categorize samples into desired groups.
#'
#' @return Returns a matrix that includes the expression ratio of given transcript ids for each sample.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @export
#'
calculateRatios <- function(normCM, metadata, transcript_id1, transcript_id2, metadata_group) {
samplenames <- colnames(normCM)[-1]
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @param metadata_group the column name in metadata used to categorize samples into desired groups.
#'
#' @return Returns a matrix that includes the expression ratio of given transcript ids for each sample.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @export
#'
calculateRatios <- function(normCM_path, metadata_path, transcript_id1, transcript_id2, metadata_group) {
normCM <- load(normCM_path)
metadata <- load(metadata_path)
samplenames <- colnames(normCM)[-1]
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
calculateRatios("../data/Normalized_CM.rda", "../data/Expression_info.rda", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios("/data/Normalized_CM.rda", "/data/Expression_info.rda", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios("data/Normalized_CM.rda", "data/Expression_info.rda", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios("Normalized_CM.rda", "Expression_info.rda", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios("Normalized_CM", "Expression_info", "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @param metadata_group the column name in metadata used to categorize samples into desired groups.
#'
#' @return Returns a matrix that includes the expression ratio of given transcript ids for each sample.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @export
#'
calculateRatios <- function(normCM, metadata, transcript_id1, transcript_id2, metadata_group) {
samplenames <- colnames(normCM)[-1]
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
devtools::document()
normalized_CM
devtools::document()
Normalized_CM
#'
#' @param metadata_group the column name in metadata used to categorize samples into desired groups.
#'
#' @return Returns a matrix that includes the expression ratio of given transcript ids for each sample.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @export
#'
calculateRatios <- function(normCM, metadata, transcript_id1, transcript_id2, metadata_group) {
samplenames <- colnames(normCM)[-1]
desiredTranscripts <- normCM %>% filter(TranscriptIDs %in% c(transcript_id1, transcript_id2))
ratioDF <- data.frame(samplenames)
ratioList <- c()
for (i in 1:length(samplenames)){
ratio <- as.numeric(desiredTranscripts[2,i+1])/as.numeric(desiredTranscripts[1,i+1]) #ratio = transcript_id2:transcript_id1
ratioList <- c(ratioList, ratio)
}
ratioDF$Ratio <- ratioList
ratioDF[, metadata_group] <- metadata[, metadata_group]
return(ratioDF)
}
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#'
#' @param transcript_id1 desired label for the y-axis.
#'
#' @return Returns the bar plot.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#' generateBarPlot(ratioDF, "Sample names", "Ratio")
#'
#' @export
generateBarPlot <- function(data, x_label, y_label) {
barPlot<-ggplot(data=ratioDF, aes_string(x=paste("fct_reorder(reorder(",colnames(data)[1], ",", colnames(data)[2], "),", colnames(data)[3],")"), y = colnames(data)[2], fill=colnames(data)[3])) +
geom_bar(stat = "identity", width=0.5)+
theme(text = element_text(size=10), axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.5, size=5))+
xlab(x_label) +
ylab(y_label)
print(barPlot)
return(barPlot)
}
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBarPlot(ratioDF, "Sample names", "Ratio")
#'
#' @param order desired ordered list of metadata_group names to sort the boxes in the plot. Default is NULL.
#'
#' @return Returns the box plot.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#' generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
#'
#' @export
generateBoxPlot <- function(data, x_label, y_label, title, order = NULL) {
boxPlot <- ggboxplot(ratioDF, x = colnames(data)[3], y = colnames(data)[2],
fill = colnames(data)[3], order = order)+
grids()+
xlab(x_label) +
labs(title = title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x=element_text(size=6), text=element_text(size=8), plot.title = element_text(size=16, hjust=0.5), legend.text = element_text(size=8))+
ylab(y_label)
print(boxPlot)
}
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
#' @param order desired ordered list of metadata_group names to sort the boxes in the plot. Default is NULL.
#'
#' @return Returns the box plot.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#' generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
#'
#' @export
#' @import ggpubr
generateBoxPlot <- function(data, x_label, y_label, title, order = NULL) {
boxPlot <- ggboxplot(ratioDF, x = colnames(data)[3], y = colnames(data)[2],
fill = colnames(data)[3], order = order)+
grids()+
xlab(x_label) +
labs(title = title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x=element_text(size=6), text=element_text(size=8), plot.title = element_text(size=16, hjust=0.5), legend.text = element_text(size=8))+
ylab(y_label)
print(boxPlot)
}
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
#' @param order desired ordered list of metadata_group names to sort the boxes in the plot. Default is NULL.
#'
#' @return Returns the box plot.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#' generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
#'
#' @export
#' @import ggpubr
generateBoxPlot <- function(data, x_label, y_label, title, order = NULL) {
boxPlot <- ggboxplot(ratioDF, x = colnames(data)[3], y = colnames(data)[2],
fill = colnames(data)[3], order = order)+
grids()+
xlab(x_label) +
labs(title = title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x=element_text(size=6), text=element_text(size=8), plot.title = element_text(size=16, hjust=0.5), legend.text = element_text(size=8))+
ylab(y_label)
print(boxPlot)
}
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
devtools::load_all()
#'
#' @param y_label desired label for the y-axis.
#'
#' @return Returns the bar plot.
#'
#' @examples
#' ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
#' generateBarPlot(ratioDF, "Sample names", "Ratio")
#'
#' @export
generateBarPlot <- function(data, x_label, y_label) {
barPlot<-ggplot(data=ratioDF, aes_string(x=paste("fct_reorder(reorder(",colnames(data)[1], ",", colnames(data)[2], "),", colnames(data)[3],")"), y = colnames(data)[2], fill=colnames(data)[3])) +
geom_bar(stat = "identity", width=0.5)+
theme(text = element_text(size=10), axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.5, size=5))+
xlab(x_label) +
ylab(y_label)
print(barPlot)
return(barPlot)
}
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
Normalized_CM
#' The count matrices were retrieved from the ENCODE Project where they were generated using kallisto.
#' Each row are the normalized transcript-level expression counts where each column are the sample file names.
#'
#' @source Barbara Wold Lab at California Institute of Technology, USA
#'
#' @format A matrix with 24 columns
#' \describe{
#'  \item{TranscriptIDs}{Transcript ID that can be searched on Ensembl}
#'  \item{All other columns}{All other columns are the file names downloaded from the ENCODE Project}
#' }
"Normalized_CM"
View(normalizedCM)
?Normalized_CM
?Normalized_CM
calculateRatios(Normalized_CM, Expression_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
Normalized_CM
devtools::install()
Normalized_CM
devtools::load_all()
rm(list = c("calculateRatios", "generateBarPlot", "generateBoxPlot"))
devtools::load_all()
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBarPlot(ratioDF, "Sample names", "Ratio")
#ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
devtools::document()
?generateBoxPlot.rd
citation("ggpubr")
citation(stringr)
citation("stringr")
citation("ggplot2")
citation("dplyr")
devtools::document()
devtools::document()
usethis::use_readme_rmd()
ratioDF <- calculateRatios(Normalized_CM, Experiment_info, "ENST00000316724.9", "ENST00000409400.1", "Biosample_summary")
generateBoxPlot(ratioDF, "Disease Type", "Ratio", "Box plot", c("Control", "mild cognitive impairment", "Cognitive impairment", "Alzheimer's disease, Cognitive impairment", "Alzheimer's disease"))
generateBarPlot(ratioDF, "Sample names", "Ratio")
devtools::document()
generateBarPlot(ratioDF, "Sample names", "Ratio")
generateBarPlot(ratioDF, "Sample names", "Ratio", "Bar plot")
devtools::document()
devtools::document()
generateBarPlot(ratioDF, "Sample names", "Ratio", "Bar plot")
devtools::document()
generateBarPlot(ratioDF, "Sample names", "Ratio", "Bar plot")
utils::sessionInfo()
citation(dplyr)
citation("dplyr")
citation("ggplot2")
citation("ggpubr")
citation("stringr")
devtools::build_readme()
usethis::use_testthat()
devtools::build_readme()
devtools::load_all()
devtools::load_all()
devtools::document()
?generateBoxPlot
Normalized_CM
n <- Normalized_CM
View(n)
e <- Experiment_info
View(Experiment_info)
TranscriptIds <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
Metadata_group <- c("C", "B")
metadata <- data.frame(TranscriptIds, Metadata_group)
View(metadata)
View(quantFileInfo)
View(ratioDF)
View(metadata)
View(quantFileInfo)
View(Experiment_info)
View(normalizedCM)
TranscriptIds <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "Metadata_group"))
context("Test calculateRatios")
library(IsoformVisRNA)
test_that("test for correct ratios", {
TranscriptIds <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(2)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "Metadata_group"))
})
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "2")
context("Test calculateRatios")
library(IsoformVisRNA)
test_that("test for correct ratios", {
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(2)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "A", "B" "Metadata_group"))
context("Test calculateRatios")
library(IsoformVisRNA)
test_that("test for correct ratios", {
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(2)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "A", "B", "Metadata_group"))
})
test_that("second test for correct ratios", {
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(0.5)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "B", "A", "Metadata_group"))
})
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "2")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(0.5)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "B", "A", "Metadata_group"))
View(ExpectedRatio)
f<-  calculateRatios(normCM, metadata, "B", "A", "Metadata_group")
View(f)
test_that("second test for correct ratios", {
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "10")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(0.1)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
f<-  calculateRatios(normCM, metadata, "B", "A", "Metadata_group")
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "A", "B", "Metadata_group"))
})
View(f)
test_that("second test for correct ratios", {
TranscriptIDs <- c("A", "B")
Sample1 <- c("1", "10")
normCM <- data.frame(TranscriptIds, Sample1)
samplenames <- c("Sample1")
Metadata_group <- c("C")
metadata <- data.frame(samplenames, Metadata_group)
Ratio <- c(0.1)
ExpectedRatio <- data.frame(samplenames, Ratio, Metadata_group)
f<-  calculateRatios(normCM, metadata, "A", "B", "Metadata_group")
expect_identical(ExpectedRatio, calculateRatios(normCM, metadata, "A", "B", "Metadata_group"))
})
devtools::document()
usethis::use_vignette("Introduction_IsoformVisRNA")
